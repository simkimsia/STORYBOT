<?xml version="1.0" encoding="utf-8"?>

<!--

ADOBE SYSTEMS INCORPORATED
Copyright 2008 Adobe Systems Incorporated
All Rights Reserved.

NOTICE: Adobe permits you to use, modify, and distribute this file
in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for the Spark Button component.  

@see spark.components.Button

@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->
<s:SparkButtonSkin xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
				   width="150" height="212" 
				   alpha.disabled="0.5">
	
	<fx:Metadata>
		<![CDATA[ 
		/** 
		* @copy spark.skins.spark.ApplicationSkin#hostComponent
		*/
		[HostComponent("org.storybot.controls.buttons.PageButton")]
		]]>
	</fx:Metadata>
	
	<fx:Script fb:purpose="styling">
		<![CDATA[         
			import org.storybot.PageButtonImageEvent;
			import org.storybot.controls.buttons.PageButton;
			
			/* Define the skin elements that should not be colorized. 
			For button, the graphics are colorized but the label is not. */
			static private const exclusions:Array = ["labelDisplay"];
			
			[Bindable]
			protected var _imageUp:Object;
			
			[Bindable]
			protected var _imageOver:Object;
			
			[Bindable]
			protected var _imageDown:Object;
			
			[Bindable]
			protected var _imageDisabled:Object;
			/** 
			 * @private
			 */     
			override public function get colorizeExclusions():Array {return exclusions;}
			
			/**
			 * @private
			 */
			override protected function initializationComplete():void
			{
				useChromeColor = true;
				super.initializationComplete();
				hostComponent.addEventListener(PageButtonImageEvent.UP_IMAGE_CHANGED, handle_imageSourceChanged, false, 0, true);
				hostComponent.addEventListener(PageButtonImageEvent.OVER_IMAGE_CHANGED, handle_imageSourceChanged, false, 0, true);
				hostComponent.addEventListener(PageButtonImageEvent.DOWN_IMAGE_CHANGED, handle_imageSourceChanged, false, 0, true);
				hostComponent.addEventListener(PageButtonImageEvent.DISABLED_IMAGE_CHANGED, handle_imageSourceChanged, false, 0, true);
			}  
			
			protected function handle_imageSourceChanged(event:PageButtonImageEvent):void{
				switch(event.type)
				{
					case PageButtonImageEvent.UP_IMAGE_CHANGED:
					{
						_imageUp = event.imageSource;
						break;
					}
						
					case PageButtonImageEvent.OVER_IMAGE_CHANGED:
					{
						_imageOver = event.imageSource;
						break;
					}
						
					case PageButtonImageEvent.DOWN_IMAGE_CHANGED:
					{
						_imageDown = event.imageSource;	
						break;
					}
						
					case PageButtonImageEvent.DISABLED_IMAGE_CHANGED:
					{
						_imageDisabled = event.imageSource;
						break;
					}
						
				}
			}
		]]>        
	</fx:Script>
	
	<!-- states -->
	<s:states>
		<s:State name="up" />
		<s:State name="over" />
		<s:State name="down" />
		<s:State name="disabled" />
	</s:states>
	
	<s:Image 
		id="imgButton" 
		horizontalCenter = "0" verticalCenter="0" 
		source.up="{_imageUp}"
		source.over="{_imageOver}"
		source.down="{_imageDown}"
		source.disabled="{_imageDisabled}"
		alpha.disabled="0.5"
		/>
	
	<!-- layer 8: text -->
	<!--- @copy spark.components.supportClasses.ButtonBase#labelDisplay  -->
	<s:Label id="labelDisplay"
			 textAlign="center"
			 maxDisplayedLines="1"
			 horizontalCenter="0" verticalCenter="1" verticalAlign="middle"
			 left="10" right="10" top="2" bottom="2">
	</s:Label>
	
</s:SparkButtonSkin>
