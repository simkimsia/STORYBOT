<?xml version="1.0" encoding="utf-8"?>
<s:Window xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 systemChrome="none"
		 transparent="true"
		 backgroundAlpha="0"
		 maximizable="false"
		 minimizable="false"
		 resizable="false"
		 windowDeactivate="window1_deactivateHandler(event)"
		 showStatusBar="false"
		 creationComplete="group1_creationCompleteHandler(event)"
		 width="217" height="190" xmlns:buttons="org.storybot.controls.buttons.*" 
		 xmlns:controls1="org.storybot.controls.*"
		 xmlns:callouts="org.storybot.controls.callouts.*"
		 >
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;

			private var _mouseDown:Boolean = false;
			
			//For Windows system tray
			[Embed(source="/../assets/storybot-icon-16.png")]
			private var Icon16Class:Class;
			private var _icon16:Bitmap = new Icon16Class as Bitmap;
			
			//For Mac dock
			[Embed(source="/../assets/storybot-icon-128.png")]
			private var Icon128Class:Class;
			private var _icon128:Bitmap = new Icon128Class as Bitmap;
			
			//System tray icon
			private var _trayIcon:Bitmap;
			private var _screenBounds:Rectangle;

            private var showCommand: NativeMenuItem = new NativeMenuItem("Show STORYBOT");

            private function createIconMenu():NativeMenu{
                var iconMenu:NativeMenu = new NativeMenu();

                if(NativeApplication.supportsSystemTrayIcon){
                    iconMenu.addItem(showCommand);
                    showCommand.addEventListener(Event.SELECT, undock);
                    iconMenu.addItem(new NativeMenuItem("", true));//Separator
                    var exitCommand: NativeMenuItem = iconMenu.addItem(new NativeMenuItem("Exit"));
                    exitCommand.addEventListener(Event.SELECT, exit);
                }

                return iconMenu;
            }

            private function exit(event:Event):void
            {
                NativeApplication.nativeApplication.exit();
            }
			
			protected function group1_creationCompleteHandler(event:FlexEvent):void
			{
				addEventListener(MouseEvent.MOUSE_DOWN, handle_mouseDown, false, 0, true);

				if(NativeApplication.supportsDockIcon){
                    var dockIcon:DockIcon = NativeApplication.nativeApplication.icon as DockIcon;
					_trayIcon = _icon128;
					//NativeApplication.nativeApplication.addEventListener(InvokeEvent.INVOKE, undock);
                    dockIcon.menu = createIconMenu();
				} else if (NativeApplication.supportsSystemTrayIcon){
					_trayIcon = _icon16;
					var sysTrayIcon:SystemTrayIcon = NativeApplication.nativeApplication.icon as SystemTrayIcon;
					sysTrayIcon.tooltip = "STORYBOT";
					//sysTrayIcon.addEventListener(MouseEvent.CLICK,undock);
                    sysTrayIcon.menu = createIconMenu();
				}

                NativeApplication.nativeApplication.icon.bitmaps = [getBitmapData()];

				var mainScreen:Screen = Screen.mainScreen;
				_screenBounds = mainScreen.bounds;
				
				//This is important. Maximizing the window ensures we get full screen real estate to display the callouts
				//And since the transparent property is set to true, it does not interfere interacting with other windows.
				nativeWindow.maximize();
			}
			
			//hides widget and shows icon in system tray
			public function dock(event:Event = null):void{
				stage.nativeWindow.visible = false;
			}
			
			//unhides widget and removes icon from system tray
			public function undock(event:Event = null):void{
				stage.nativeWindow.visible = true;
			}
			
			private function getBitmapData():BitmapData{
				var bmpData:BitmapData = new BitmapData(_trayIcon.width,_trayIcon.height, true,0x00ffffff);
				bmpData.draw(_trayIcon);
				
				return bmpData;
			}
			
			protected function handle_mouseDown(event:MouseEvent):void{
				//Allow moving widget when clicked on the face Or Widget areas
				//Clicking on the buttons or within the text field (Search) should not make the widge movable
				if(event.target == widgetContainer || event.target == imgStorybot.skin){
					_mouseDown = true;
					stage.addEventListener(MouseEvent.MOUSE_MOVE, handle_mouseMove, false, 0, true);
					stage.addEventListener(MouseEvent.MOUSE_UP, handle_mouseUp, false, 0, true);
				}
			}
			
			protected function handle_mouseMove(event:MouseEvent):void{
				if(_mouseDown){
					//stage.nativeWindow.startMove();
					widgetContainer.startDrag(false,_screenBounds);
				}
                closeAllCallouts();
			}

            private function closeAllCallouts():void
            {
                plusNewCallout.close();
            }
			
			protected function handle_mouseUp(event:MouseEvent):void{
				stage.removeEventListener(MouseEvent.MOUSE_MOVE, handle_mouseMove);
				stage.removeEventListener(MouseEvent.MOUSE_UP, handle_mouseUp);
				_mouseDown = false;
				widgetContainer.stopDrag();
                closeAllCallouts();
			}
			
			import spark.components.Application;
			import spark.components.Callout;
			protected function btnAdd_HoverHandler(event:MouseEvent):void
			{
				plusNewCallout.open(btnActionAddNew);
				activate();
			}



            import mx.core.FlexGlobals;
            protected function btnAdd_clickHandler(event:MouseEvent):void
            {
                // open new window
                FlexGlobals.topLevelApplication.setVisible(true);
            }
			
			protected function window1_deactivateHandler(event:Event):void
			{
				plusNewCallout.close();
			}
			
			protected function btnClose_clickHandler(event:MouseEvent):void
			{
				exit(null);
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<callouts:PlusNewCallout id="plusNewCallout" >
			
		</callouts:PlusNewCallout>
	</fx:Declarations>
	<s:Group id="widgetContainer" width="217" height="190" right="10" top="10" >
		<s:Rect left="0" top="0" right="0" bottom="0" radiusX="4" radiusY="4">
			<s:fill>
				<s:SolidColor color="0xd5d7d8" alpha="0.85" />
			</s:fill>
			<s:stroke>
				<s:SolidColorStroke color="0xBDBEC1" weight="1" pixelHinting="true" />
			</s:stroke>
		</s:Rect>
		
		<s:Rect left="1" top="1" right="1" bottom="1" radiusX="4" radiusY="4">
			<s:stroke>
				<s:SolidColorStroke color="0xeeeeee" weight="0.5" pixelHinting="true" />
			</s:stroke>
		</s:Rect>
		
		<s:Image id="imgStorybot" left="7" top="10" source="@Embed('/../assets/storybot-face.png')"/>
		<controls1:BalanceIndicator x="65" y="18">
		</controls1:BalanceIndicator>
		<controls1:Search y="65" horizontalCenter="-1">
		</controls1:Search>
		<controls1:InfoBox 
			id="infoLibrary"
			x="9" 
			y="98" 
			info="09"
			iconSelectedSource="@Embed('/../assets/widget-library-icon-selected.png')"
			iconSource="@Embed('/../assets/widget-library-icon.png')">
		</controls1:InfoBox>
		<controls1:InfoBox 
			id="infoWorks"
			x="77" 
			y="98"
			info="10"
			iconSelectedSource="@Embed('/../assets/widget-work-icon-selected.png')"
			iconSource="@Embed('/../assets/widget-work-icon.png')">
		</controls1:InfoBox>
		<controls1:InfoBox id="infoFolio" x="145" y="98"
						   iconSelectedSource="@Embed('/../assets/widget-folio-icon-selected.png')"
						   iconSource="@Embed('/../assets/widget-folio-icon.png')" info="999+">
		</controls1:InfoBox>
		<buttons:ActionButton 
			id="btnActionAddNew"
			mouseOver="btnAdd_HoverHandler(event)"
            mouseOut="window1_deactivateHandler(event)"
            click="btnAdd_clickHandler(event)"
			left="10" bottom="8"
			skinClass="org.storybot.skins.widget.AddActionButtonSkin"
			/>
		<buttons:ActionButton 
			id="btnActionSynch"
			left="33" bottom="8"
			skinClass="org.storybot.skins.widget.SynchActionButtonSkin"/>
		<buttons:StoryzerButton 
			id="btnApp"
			right="10" 
			bottom="9"/>
		<buttons:LoginButton id="btnLogin" y="18" right="10"/>
		<s:Button 
			id="btnClose"
			skinClass="org.storybot.skins.button.WidgetCloseButtonSkin"
			click="btnClose_clickHandler(event)"
			right="6" top="6" 
			width="8" height="8" />
	</s:Group>
</s:Window>
